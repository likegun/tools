#!/usr/bin/env node
'use strict';
const inquirer = require('inquirer');
const _ = require('lodash');
const $ = require('./functional');

const category = {
    title: null,
    key: '',
    value: []
};

function pbcopy(data) {
    var proc = require('child_process').spawn('pbcopy'); 
    proc.stdin.write(data); proc.stdin.end();
}

function splitTableToChildrens() {
    return function(table) {
        return table
                .split('\n')
                .filter(e => e)
                .reduce((results, line, index, array) => {
                    if(line.split(',').length > 1) _.last(results).push(line);
                    else if(index === array.length - 1 || array[index + 1].split(',').length == 1) _.last(results).push(line);
                    else results.push([line]);

                    return results;
                }, []);

    };
}

function toCategorys(lineSpliter) {
    return function(children) {
        return children
                .map(line => lineSpliter(line))
                .reduce((categorys, titles) => 
                    $.cat(categorys, titles.map(title => {
                        const categoryCopy = _.cloneDeep(category);
                        _.set(categoryCopy, 'title', title);
                        return categoryCopy;
                    }))
                , []);
    };
}

function toTableData(direction, chunkSize = 3) {
    return function(categorys) {
        return direction == 'vertical' ? [categorys] : _.chunk(categorys, chunkSize);
    };
}

function toSchemas(title, key, direction, align = 'left') {
    return function(tableData) {
        return {
            title,
            direction,
            key,
            align,
            tableData
        };
    };
}

(async () => {
    try {
        const tableString = (await inquirer.prompt([{
            type: 'editor',
            name: 'v',
            message: '输入所有table吧',
        }])).v;
        
        pbcopy($.pipeline(
            tableString,
            splitTableToChildrens(),
            function(childrens) {
                return childrens.map(children => $.pipeline(
                    $.rest(children),
                    toCategorys(line => line.split(',')),
                    toTableData(children.length > 2 ? 'horizontal' : 'vertical'),
                    toSchemas(_.first(children), '', children.length > 2 ? 'horizontal' : 'vertical'),
                ));
            },
            _.partial(JSON.stringify, _, null, 2)
        ));
    } catch(e) {
        console.error(e);
    }
})();